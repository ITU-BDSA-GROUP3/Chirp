using Chirp.Core;
using Chirp.Infrastructure;
using ChirpDBContext = Chirp.Infrastructure.ChirpDBContext;
using FluentAssertions;
using Microsoft.Data.Sqlite;
using Microsoft.EntityFrameworkCore;
using Xunit;
namespace Chirp.Razor.UnitTest;

public class AuthorTest
{
    private readonly SqliteConnection _connection;
    private readonly DbContextOptions<ChirpDBContext> _contextOptions;

    public AuthorTest()
    {
        _connection = new SqliteConnection("Filename=:memory:");
        _connection.Open();

        _contextOptions = new DbContextOptionsBuilder<ChirpDBContext>()
            .UseSqlite(_connection)
            .Options;

        var context = new ChirpDBContext(_contextOptions);
        context.Database.EnsureCreated();

        context.Authors.AddRange(
            new Author { AuthorId = 1, Name = "Jens", Email = "test@mail.dk" },
            new Author { AuthorId = 2, Name = "BÃ¸rge", Email = "wow@dd.dk" }
        );
        context.SaveChanges();
    }
    
    [Fact]
    public void CreateAuthor_StoresNewAuthorInDbOrInDb_AssertAmountAuthors()
    {
        var context = new ChirpDBContext(_contextOptions);
        var authorRepository = new AuthorRepository(context);

        // Arrange
        var authorsBefore = context.Authors.Count();

        var newAuthor = new Author
        {
            Name = "Name and",
            Email = "Email pair that isn't in the db",
        };

        // Act
        authorRepository.CreateAuthor(newAuthor.Name, newAuthor.Email);

        // Assert
        context.Authors.Should().HaveCount(authorsBefore+1);
    }

    [Fact]
    public void FindAuthorByName_ReturnsAListOfAuthors_ShouldHaveExpectedAuthors()
    {
        var context = new ChirpDBContext(_contextOptions);
        var authorRepository = new AuthorRepository(context);

        // Arrange
        var authorsWithTheSameName = new List<Author>
        {
            new () { Name = "Ida", Email = "ida1@" },
            new () { Name = "Ida", Email = "ida2@" }
        };
        context.Authors.AddRange(authorsWithTheSameName);
        context.SaveChanges();

        // Act and Assert
        authorRepository.FindAuthorsByName("Ida").Should().BeEquivalentTo(authorsWithTheSameName);
    }

    [Fact]
    public void CreatedAuthor_GetsAutogeneratedId_ShouldBeEquivalent()
    {
        var context = new ChirpDBContext(_contextOptions);
        var authorRepository = new AuthorRepository(context);

        // Arrange
        var authorsBefore = context.Authors.Count();

        var newAuthor = new Author
        {
            Name = "Hans Hansen", Email = "UniqueMail898989",
        };

        // Act
        authorRepository.CreateAuthor(newAuthor.Name, newAuthor.Email);

        // Assert
        var author = authorRepository.FindAuthorsByEmail(newAuthor.Email).First();
        author.AuthorId.Should().NotBe(null);
        author.Name.Should().Be(newAuthor.Name);
        author.Email.Should().Be(newAuthor.Email);
    }
}